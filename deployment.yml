AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket where the Lambda deployment is stored

  LambdaFunctionName:
    Type: String
    Default: DevopsGolangLambda
    Description: The name of the Lambda function

  CustomDomainName:
    Type: String
    Description: The custom domain name for the API (e.g., api.yourdomain.com)

  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate for the custom domain

  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt GoLambdaFunction.Arn

  # Lambda Function
  GoLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: main
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: "lambda/go-lambda.zip"
      Runtime: "provided.al2023"
      Timeout: 15

  # API Gateway Rest API
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "GoLambdaAPI"
      Description: "API for Go Lambda function"

  # API Gateway Resource
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "lambda"

  # API Gateway Method
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: GoLambdaFunction
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GoLambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  # Lambda Permission for API Gateway
  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    DependsOn: ApiGatewayMethod
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GoLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*

Outputs:
  ApiUrl:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/lambda"
