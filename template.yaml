AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket where the Lambda deployment is stored

  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone Id

  CustomDomainName:
    Type: String
    Description: The custom domain name for the API (e.g., api.yourdomain.com)

  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate for the custom domain

Resources:
  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function
  GolangLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DhartiGolangLambdaFunction
      Runtime: "provided.al2023"
      Handler: bootstrap
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref "S3BucketName"
        S3Key: deployment.zip
      MemorySize: 128
      Timeout: 10

  # API Gateway
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DhartiGolangAPI
      Description: API Gateway for Golang Lambda

  APIGatewayRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: "golang"

  # Root Method in API Gateway
  RootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIGatewayRootResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GolangLambda.Arn}/invocations"

  # API Gateway Deployment
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RootMethod
    Properties:
      RestApiId: !Ref APIGateway
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GolangLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/*"

  # Custom Domain for API Gateway
  APIGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref CustomDomainName
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Mapping to Custom Domain
  APIGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref APIGatewayCustomDomain
      RestApiId: !Ref APIGateway
      Stage: prod

  # Route 53 DNS Record for API Gateway
  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref CustomDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt APIGatewayCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt APIGatewayCustomDomain.RegionalHostedZoneId
